name: Steam Sync (Supabase Edge Function)

on:
  schedule:
    - cron: '* * * * *'
  workflow_dispatch:
    inputs:
      limit:
        description: 'Batch size (1~200)'
        required: false
        default: '100'
      offset:
        description: 'Optional offset'
        required: false
        default: ''

jobs:
  run-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      FUNCTION_URL: ${{ vars.SUPABASE_FUNCTION_URL }}
      SR_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      DEFAULT_LIMIT: ${{ vars.SYNC_LIMIT }}

    steps:
      - name: Install jq (for pretty JSON)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Show trigger info
        run: |
          echo "Triggered by: ${{ github.event_name }}"
          echo "Function URL: $FUNCTION_URL"

      - name: Health check (GET ?health=1)
        run: |
          set -e
          curl -sS -X GET "${FUNCTION_URL}?health=1" \
            -H "Authorization: Bearer ${SR_KEY}" \
            -H "apikey: ${SR_KEY}" \
            -H "Accept: application/json" | jq .

      - name: Decide limit/offset
        id: decide
        run: |
          INPUT_LIMIT="${{ github.event.inputs.limit }}"
          INPUT_OFFSET="${{ github.event.inputs.offset }}"
          if [ -z "$INPUT_LIMIT" ]; then INPUT_LIMIT="${DEFAULT_LIMIT:-100}"; fi
          echo "limit=$INPUT_LIMIT"   >> $GITHUB_OUTPUT
          echo "offset=$INPUT_OFFSET" >> $GITHUB_OUTPUT

      - name: Run sync (POST)
        run: |
          set -e
          LIMIT="${{ steps.decide.outputs.limit }}"
          OFFSET="${{ steps.decide.outputs.offset }}"
          echo "POST with limit=${LIMIT} offset=${OFFSET}"

          BODY="{\"limit\": ${LIMIT}}"
          if [ -n "$OFFSET" ]; then BODY="{\"limit\": ${LIMIT}, \"offset\": ${OFFSET}}"; fi

          curl -sS -X POST "$FUNCTION_URL" \
            -H "Authorization: Bearer ${SR_KEY}" \
            -H "apikey: ${SR_KEY}" \
            -H "Content-Type: application/json" \
            -d "$BODY" | tee response.json

          echo "---- Response ----"
          cat response.json | jq .

      - name: Fail on explicit error
        run: |
          set -e
          ERR=$(jq -r '.error // empty' response.json)
          if [ -n "$ERR" ]; then
            echo "Edge Function error: $ERR"
            exit 1
          fi
