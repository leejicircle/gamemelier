name: Steam Sync (Supabase Edge Function)

on:
  schedule:
    - cron: '*/5 * * * *'

  workflow_dispatch:
    inputs:
      limit:
        description: 'Batch size (1~200). Omit to use default.'
        required: false
        default: ''
      offset:
        description: 'Optional offset (cursor). Omit to use saved cursor.'
        required: false
        default: ''

concurrency:
  group: steam-sync
  cancel-in-progress: true

jobs:
  run-sync:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      # Repository → Settings → Secrets and variables → Actions 설정 필요
      FUNCTION_URL: ${{ vars.SUPABASE_FUNCTION_URL }} # 예: https://<project-ref>.supabase.co/functions/v1/steam-sync
      API_KEY: ${{ secrets.SUPABASE_ANON_KEY }} # 호출용: Anon Public Key
      DEFAULT_LIMIT: ${{ vars.SYNC_LIMIT }} # 기본 배치 크기 (예: 100)

    steps:
      - name: Check required envs
        run: |
          set -e
          [ -z "$FUNCTION_URL" ] && { echo "❌ Missing vars.SUPABASE_FUNCTION_URL"; exit 1; }
          [ -z "$API_KEY" ] && { echo "❌ Missing secrets.SUPABASE_ANON_KEY"; exit 1; }
          echo "✅ Env check OK"
          echo "FUNCTION_URL=$FUNCTION_URL"

      - name: Install jq (pretty JSON)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Health check (GET ?health=1)
        run: |
          set -e
          curl -sS -X GET "${FUNCTION_URL}?health=1" \
            -H "Authorization: Bearer ${API_KEY}" \
            -H "apikey: ${API_KEY}" \
            -H "Accept: application/json" | jq .

      - name: Decide limit/offset (cron & manual)
        id: decide
        run: |
          RAW_LIMIT="${{ github.event.inputs.limit }}"
          RAW_OFFSET="${{ github.event.inputs.offset }}"
          : "${DEFAULT_LIMIT:=100}"
          if [ -z "$RAW_LIMIT" ]; then LIMIT="$DEFAULT_LIMIT"; else LIMIT="$RAW_LIMIT"; fi
          OFFSET="$RAW_OFFSET"
          echo "limit=$LIMIT"   >> "$GITHUB_OUTPUT"
          echo "offset=$OFFSET" >> "$GITHUB_OUTPUT"
          echo "➡️ Using limit=$LIMIT offset='${OFFSET}'"

      - name: Run sync (POST to Edge Function)
        run: |
          set -e
          LIMIT="${{ steps.decide.outputs.limit }}"
          OFFSET="${{ steps.decide.outputs.offset }}"
          BODY="{\"limit\": ${LIMIT}}"
          if [ -n "$OFFSET" ]; then BODY="{\"limit\": ${LIMIT}, \"offset\": ${OFFSET}}"; fi

          echo "POST $FUNCTION_URL with body: $BODY"
          curl -sS -X POST "$FUNCTION_URL" \
            -H "Authorization: Bearer ${API_KEY}" \
            -H "apikey: ${API_KEY}" \
            -H "Content-Type: application/json" \
            -d "$BODY" | tee response.json

          echo "---- Response (pretty) ----"
          cat response.json | jq .

      - name: Fail on explicit error field
        run: |
          set -e
          ERR=$(jq -r '.error // empty' response.json)
          if [ -n "$ERR" ]; then
            echo "❌ Edge Function error: $ERR"
            exit 1
          fi
          echo "✅ No error field in response"
